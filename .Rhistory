BMI_25_30 == 1 ~ "BMI <25",
BMI_25_30 == 2 ~ "BMI [25-30)",
BMI_25_30 == 3 ~ "BMI >=30",
TRUE ~ NA_character_  # This line handles any unexpected values
))
d$Smoking <- ifelse(d$Smoking == "Do not smoke", "Non smoker", ifelse(d$Smoking == "Cigarettes, pipe tobacco...", "Smoker", NA))
d$Migraine <- ifelse(d$`Medical History` == "migraine" | d$`Medical History`== "Migraine",1,0)
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(gtsummary)
library(rstatix)
library(readxl)
d <- read_excel("C:/Users/Admin/OneDrive/NC_Quangpho/Data_regardless_sleep_18_03.xlsx")
View(d)
d$BMI_25_30 <- ifelse(d$BMI_index < 25, 1,
ifelse(d$BMI_index >= 25 & d$BMI_index < 30, 2, 3))
d$Age_stage <- ifelse(d$Age <= 30, 1,
ifelse(d$Age >= 30 & d$Age < 40, 2, ifelse(d$Age >= 40 & d$Age < 50, 3,4)))
d$Gender <- ifelse(d$Gender == 0, "female", ifelse(d$Gender == 1, "male", NA))
d$Race <- d$`6. Race`
d <- d %>%
mutate(Age_stage = case_when(
Age_stage == 1 ~ "Age <30",
Age_stage == 2 ~ "Age [30-40)",
Age_stage == 3 ~ "Age [40-50)",
Age_stage == 4 ~ "Age >=50",
TRUE ~ NA_character_  # This line handles any unexpected values
))
d$Hypertension <- ifelse(d$Hypertension == 0, "No", ifelse(d$Hypertension == 1, "Yes", NA))
d$`Stress index` <- ifelse(d$`Stress index` == 0, "No", ifelse(d$`Stress index` == 1, "Yes", NA))
d$Obesity <- ifelse(d$Obesity == 0, "No", ifelse(d$Obesity == 1, "Yes", NA))
d <- d %>%
mutate(BMI_25_30 = case_when(
BMI_25_30 == 1 ~ "BMI <25",
BMI_25_30 == 2 ~ "BMI [25-30)",
BMI_25_30 == 3 ~ "BMI >=30",
TRUE ~ NA_character_  # This line handles any unexpected values
))
d$Smoking <- ifelse(d$Smoking == "Do not smoke", "Non smoker", ifelse(d$Smoking == "Cigarettes, pipe tobacco...", "Smoker", NA))
d$Migraine <- ifelse(d$Migraine == 0, "No migraine", ifelse(d$Migraine == 1, "Migraine", NA))
generate_final_table(d, "M_mean", subgroup_list) %>% knitr::kable()
library(dplyr)
calculate_95CI <- function(data, variable) {
ci_lower <- quantile(data[[variable]], probs = 0.025, na.rm = TRUE)
ci_upper <- quantile(data[[variable]], probs = 0.975, na.rm = TRUE)
return(c(CI_lower = ci_lower, CI_upper = ci_upper))
}
compare_means <- function(data, subgroup, variable) {
# Split data into subgroups
subgroup_levels <- unique(data[[subgroup]])
results <- data.frame(Subgroup = subgroup_levels, n = NA, Mean = NA, CI_lower = NA, CI_upper = NA)
# Loop through each subgroup to calculate mean, n, and 95% CI
for (i in 1:length(subgroup_levels)) {
subgroup_data <- data[data[[subgroup]] == subgroup_levels[i], variable, drop = FALSE]
n <- nrow(subgroup_data)
mean_value <- mean(subgroup_data[[variable]], na.rm = TRUE)
ci <- calculate_95CI(data, variable)
results[i, "n"] <- n
results[i, "Mean"] <- mean_value
results[i, "CI_lower"] <- ci["CI_lower"]
results[i, "CI_upper"] <- ci["CI_upper"]
}
# Check if there are more than two subgroups
if (length(subgroup_levels) > 2) {
results$P_Value <- NA
} else if (length(subgroup_levels) == 2) {
# If exactly two subgroups, perform Wilcoxon signed-rank test and add p-values to the results
test_result <- wilcox.test(data[[variable]] ~ data[[subgroup]], data = data)
results$P_Value <- rep(test_result$p.value, nrow(results))
} else {
# If only one subgroup, no comparison is needed
results$P_Value <- NA
message("Only one subgroup detected. No comparison needed.")
}
return(results)
}
perform_pairwise_wilcox <- function(data, variable, group_list) {
results_list <- list()
for (group in group_list) {
group_data <- data[[group]]
unique_groups <- unique(group_data)
if (length(unique_groups) > 2) {
# Generate all unique pairs
group_pairs <- combn(unique_groups, 2, simplify = FALSE)
# Initialize an empty data frame to store results
group_results <- data.frame(Group1 = character(), Group2 = character(), P_Value = numeric(), stringsAsFactors = FALSE)
for (pair in group_pairs) {
# Subset data for each group in the pair
data1 <- data[group_data == pair[1], variable, drop = FALSE]
data2 <- data[group_data == pair[2], variable, drop = FALSE]
# Perform Wilcoxon test
test_result <- wilcox.test(data1[[variable]], data2[[variable]])
# Store the results
group_results <- rbind(group_results, data.frame(Group1 = pair[1], Group2 = pair[2], P_Value = test_result$p.value, stringsAsFactors = FALSE))
}
# Add group information to the results and make it the first column
group_results <- cbind(Group = group, group_results)
results_list[[group]] <- group_results
} else {
message(paste("Group", group, "does not have more than 2 unique levels. Skipping."))
}
}
# Combine all results into a single dataframe
final_results <- do.call(rbind, results_list)
# Adjust the row names to avoid duplication
rownames(final_results) <- NULL
return(final_results)
}
draw_forest_plot <- function(final_table) {
# Create a unique identifier for each row combining Subgroup and Subgroup_Category
final_table$Identifier <- with(final_table, paste(Subgroup, Subgroup_Category, sep = ": "))
# Convert Identifier to factor for proper ordering in the plot
final_table$Identifier <- factor(final_table$Identifier, levels = unique(final_table$Identifier))
name_of_plot <- substr(names(final_table)[3], 3, nchar(names(final_table)[3]))
# Create the Forest plot
ggplot(final_table, aes(x = Mean, y = Identifier)) +
geom_point(shape=15, size=3, color= "black") +
geom_errorbarh(aes(xmin = CI_lower, xmax = CI_upper), height = 0.2) +
labs(x = "Mean", y = "Subgroup Category", title = paste("Forest Plot for", name_of_plot)) +
theme_minimal() +
theme(axis.text.y = element_text(size = 7))  # Adjust text size for clarity if needed
}
generate_final_table <- function(data, variable, subgroup_list) {
final_results <- list()
for (subgroup in subgroup_list) {
subgroup_result <- compare_means(data, variable, subgroup)
colnames(subgroup_result)[colnames(subgroup_result) == "n"] <- paste("n", variable, sep = "_")
# Add a column to indicate the subgroup category and make it the first column
subgroup_result$Subgroup_Category <- subgroup
subgroup_result <- subgroup_result[, c("Subgroup_Category", setdiff(names(subgroup_result), "Subgroup_Category"))]
final_results[[subgroup]] <- subgroup_result
}
# Combine all results into a single dataframe
final_table <- do.call(rbind, final_results)
# Adjusting the row names to avoid duplication
rownames(final_table) <- NULL
# Sort final_table by Subgroup_Category first, then Subgroup
final_table <- final_table[order(final_table$Subgroup_Category, final_table$Subgroup), ]
return(final_table)
}
subgroup_list <- c("Migraine", "Gender", "Age_stage", "Race","Typer of skins", "Stress index", "Smoking", "DASS_21",  "Stress" , "Anxiety", "Hypertension", "BMI_25_30", "Obesity" )
List_var <- c("M_mean", "Kv100_mean", "δ_mean", "T_mean", "A365_mean", "A460_mean", "Anadn_mean", "POM_mean", "A-E_mean", "A-N_mean", "A-M_mean", "A-R_mean", "A-C_mean", "F-E_mean", "F-N_mean", "F-M_mean", "F-R_mean", "F-C_mean")
generate_final_table(d, "M_mean", subgroup_list) %>% knitr::kable()
subgroup_list <- c("Gender", "Age_stage", "Race","Typer of skins", "Stress index", "Smoking", "DASS_21",  "Stress" , "Anxiety", "Hypertension", "BMI_25_30", "Obesity" )
generate_final_table(d, "M_mean", subgroup_list) %>% knitr::kable()
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(gtsummary)
library(survival)
library(ggsurvfit)
library(survminer)
library(foreign)
d <- read.spss("C:/Users/Admin/Dropbox/Afatinib/Data/Total_update_28.03.phan_tich_OS.sav", to.data.frame = TRUE, use.value.labels = TRUE)
View(d)
d$pl_smoke <- relevel(d$pl_smoke, ref = "Current smoker")
d$X.2.Giới <- relevel(d$X.2.Giới, ref = "Nam")
d$startingdose <- relevel(d$startingdose, ref = "40mg")
d$Tolelancedose <- relevel(d$Tolelancedose, ref = "40mg")
d<- d %>% filter(., Age>=65)
hist(d$Age)
OS_time<- Surv(d$OS, d$tinhtrangOS==1)
Tab1 <- d %>% select(X.2.Giới, pl_PS01, pl_smoke, Vịtrídicănthầnkinhtrungương ,DEL19onlyL858Lonlyuncommon, stage, startingdose, Tolelancedose) %>%
tbl_summary(
digits = list(all_categorical() ~ c(0, 1))
)
Tab1
TTF_time<- Surv(d$TTF, d$tinhtrangTTF==1)
Fig1 <- survfit2(TTF_time~1, data=d) %>%
ggsurvfit(color = "blue", linewidth = 1)+
add_risktable(size = 3)+
add_legend_title(title = "OS")+
add_censor_mark(color= 'orange')+
scale_ggsurvfit(x_scales = list(breaks = seq(0, 48, by = 6))) +
labs(y= "Time to Treatment Failure",
x= "Months")+
theme_classic()+
theme(aspect.ratio = .8)
Fig1
TTF_table1 <-
list(
survfit(TTF_time ~ 1, d),
survfit(TTF_time ~ X.2.Giới, d),
survfit(TTF_time ~ Vịtrídicănthầnkinhtrungương, d),
survfit(TTF_time ~ pl_PS01, d),
survfit(TTF_time ~ pl_smoke, d),
survfit(TTF_time ~ stage, d),
survfit(TTF_time ~ startingdose, d),
survfit(TTF_time ~ Tolelancedose, d),
survfit(TTF_time ~ DEL19onlyL858Lonlyuncommon, d),
survfit(TTF_time ~ common_vs_uncommon, d)
) %>%
tbl_survfit(
probs = 0.5,
estimate_fun = function(x) style_number(x, digits = 1),
label_header = "**Median TTF (95% CI)**"
) %>%
add_p(test = "logrank",
pvalue_fun = function(x) style_number(x, digits = 3))
TTF_table1
pairwise_EGFR_TTF <- pairwise_survdiff(
Surv(TTF,tinhtrangTTF)~DEL19onlyL858Lonlyuncommon,
data = d,
p.adjust.method = "none"  # You can choose a different p-value adjustment method if needed
)
print(pairwise_EGFR_TTF)
cox_multi_TTF <-
coxph(TTF_time ~  X.2.Giới + Vịtrídicănthầnkinhtrungương+ pl_PS01+ pl_smoke+DEL19onlyL858Lonlyuncommon + startingdose + Tolelancedose, d) %>%
tbl_regression(exponentiate = TRUE,
estimate_fun = function(x) style_number(x, digits = 2),
pvalue_fun=function(x) style_number(x, digits = 3))
cox_multi_TTF
Fig2 <- survfit2(OS_time~1, data=d) %>%
ggsurvfit(color = "blue", linewidth = 1)+
add_risktable(size = 3)+
add_legend_title(title = "OS")+
add_censor_mark(color= 'orange')+
scale_ggsurvfit(x_scales = list(breaks = seq(0, 48, by = 6))) +
labs(y= "Overall Survival",
x= "Months")+
theme_classic()+
theme(aspect.ratio = .8)
Fig2
OS_table1 <-
list(
survfit(OS_time ~ 1, d),
survfit(OS_time ~ X.2.Giới, d),
survfit(OS_time ~ Vịtrídicănthầnkinhtrungương, d),
survfit(OS_time ~ pl_PS01, d),
survfit(OS_time ~ pl_smoke, d),
survfit(OS_time ~ stage, d),
survfit(OS_time ~ startingdose, d),
survfit(OS_time ~ Tolelancedose, d),
survfit(OS_time ~ DEL19onlyL858Lonlyuncommon, d),
survfit(OS_time ~ common_vs_uncommon, d)
) %>%
tbl_survfit(
probs = 0.5,
estimate_fun = function(x) style_number(x, digits = 1),
label_header = "**Median OS (95% CI)**"
) %>%
add_p(test = "logrank",
pvalue_fun = function(x) style_number(x, digits = 3))
OS_table1
pairwise_EGFR_OS <- pairwise_survdiff(
Surv(OS,tinhtrangOS)~DEL19onlyL858Lonlyuncommon,
data = d,
p.adjust.method = "none"  # You can choose a different p-value adjustment method if needed
)
print(pairwise_EGFR_OS)
cox_multi_OS <-
coxph(OS_time ~  X.2.Giới + pl_smoke+ Vịtrídicănthầnkinhtrungương+ pl_PS01 +common_vs_uncommon +startingdose + Tolelancedose, d) %>%
tbl_regression(exponentiate = TRUE,
estimate_fun = function(x) style_number(x, digits = 2),
pvalue_fun=function(x) style_number(x, digits = 3))
cox_multi_OS
# Create a list of coxph models
cox_OS <- list(
coxph(OS_time ~ X.2.Giới, d),
coxph(OS_time ~ pl_PS01, d),
coxph(OS_time ~ pl_smoke, d),
coxph(OS_time ~ DEL19onlyL858Lonlyuncommon, d),
coxph(OS_time ~ stage, d),
coxph(OS_time ~ Vịtrídicănthầnkinhtrungương, d),
coxph(OS_time ~ startingdose, d),
coxph(OS_time ~ Tolelancedose, d),
coxph(OS_time ~ common_vs_uncommon, d)
)
# Use tbl_regression to create gtsummary objects for each model
OS_table3 <- lapply(cox_OS, function(model) {
tbl_regression(model,
exponentiate = TRUE,
pvalue_fun=function(x) style_number(x, digits = 3))
})
OS_table_stacked <- tbl_stack(
tbls = OS_table3
)
OS_table_stacked
cox_multi_OS <-
coxph(OS_time ~  X.2.Giới + pl_smoke+ Vịtrídicănthầnkinhtrungương+ pl_PS01 + DEL19onlyL858Lonlyuncommon +startingdose + Tolelancedose, d) %>%
tbl_regression(exponentiate = TRUE,
estimate_fun = function(x) style_number(x, digits = 2),
pvalue_fun=function(x) style_number(x, digits = 3))
cox_multi_OS
cox_multi_OS <-
coxph(OS_time ~  X.2.Giới + pl_smoke+ Vịtrídicănthầnkinhtrungương+ pl_PS01 + common_vs_uncommon +startingdose + Tolelancedose, d) %>%
tbl_regression(exponentiate = TRUE,
estimate_fun = function(x) style_number(x, digits = 2),
pvalue_fun=function(x) style_number(x, digits = 3))
cox_multi_OS
cox_multi_OS <-
coxph(OS_time ~  X.2.Giới + pl_smoke+ Vịtrídicănthầnkinhtrungương+ pl_PS01 + common_vs_uncommon +startingdose , d) %>%
tbl_regression(exponentiate = TRUE,
estimate_fun = function(x) style_number(x, digits = 2),
pvalue_fun=function(x) style_number(x, digits = 3))
cox_multi_OS
cox_multi_OS <-
coxph(OS_time ~  pl_PS01 + common_vs_uncommon  , d) %>%
tbl_regression(exponentiate = TRUE,
estimate_fun = function(x) style_number(x, digits = 2),
pvalue_fun=function(x) style_number(x, digits = 3))
cox_multi_OS
cox_multi_OS <-
coxph(OS_time ~  X.2.Giới + pl_smoke+ Vịtrídicănthầnkinhtrungương+ pl_PS01 + DEL19onlyL858Lonlyuncommon +startingdose + Tolelancedose, d) %>%
tbl_regression(exponentiate = TRUE,
estimate_fun = function(x) style_number(x, digits = 2),
pvalue_fun=function(x) style_number(x, digits = 3))
cox_multi_OS
library(tidyverse)
library(gtsummary)
library(survival)
library(ggsurvfit)
library(survminer)
library(foreign)
d <- read.spss("C:/Users/Admin/Dropbox/Afatinib/Data/Total_update_28.03.phan_tich_OS.sav", to.data.frame = TRUE, use.value.labels = TRUE)
View(d)
d$pl_smoke <- relevel(d$pl_smoke, ref = "Current smoker")
d$X.2.Giới <- relevel(d$X.2.Giới, ref = "Nam")
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(gtsummary)
library(rstatix)
library(readxl)
d <- read_excel("C:/Users/Admin/OneDrive/NC_Quangpho/Data_regardless_sleep_18_03.xlsx")
View(d)
d$BMI_25_30 <- ifelse(d$BMI_index < 25, 1,
ifelse(d$BMI_index >= 25 & d$BMI_index < 30, 2, 3))
d$Age_stage <- ifelse(d$Age <= 30, 1,
ifelse(d$Age >= 30 & d$Age < 40, 2, ifelse(d$Age >= 40 & d$Age < 50, 3,4)))
d$Gender <- ifelse(d$Gender == 0, "female", ifelse(d$Gender == 1, "male", NA))
d$Race <- d$`6. Race`
d <- d %>%
mutate(Age_stage = case_when(
Age_stage == 1 ~ "Age <30",
Age_stage == 2 ~ "Age [30-40)",
Age_stage == 3 ~ "Age [40-50)",
Age_stage == 4 ~ "Age >=50",
TRUE ~ NA_character_  # This line handles any unexpected values
))
d$Hypertension <- ifelse(d$Hypertension == 0, "No", ifelse(d$Hypertension == 1, "Yes", NA))
d$`Stress index` <- ifelse(d$`Stress index` == 0, "No", ifelse(d$`Stress index` == 1, "Yes", NA))
d$Obesity <- ifelse(d$Obesity == 0, "No", ifelse(d$Obesity == 1, "Yes", NA))
d <- d %>%
mutate(BMI_25_30 = case_when(
BMI_25_30 == 1 ~ "BMI <25",
BMI_25_30 == 2 ~ "BMI [25-30)",
BMI_25_30 == 3 ~ "BMI >=30",
TRUE ~ NA_character_  # This line handles any unexpected values
))
d$Smoking <- ifelse(d$Smoking == "Do not smoke", "Non smoker", ifelse(d$Smoking == "Cigarettes, pipe tobacco...", "Smoker", NA))
d$Migraine <- ifelse(d$Migraine == 0, "No migraine", ifelse(d$Migraine == 1, "Migraine", NA))
library(dplyr)
calculate_95CI <- function(data, variable) {
ci_lower <- quantile(data[[variable]], probs = 0.025, na.rm = TRUE)
ci_upper <- quantile(data[[variable]], probs = 0.975, na.rm = TRUE)
return(c(CI_lower = ci_lower, CI_upper = ci_upper))
}
compare_means <- function(data, subgroup, variable) {
# Split data into subgroups
subgroup_levels <- unique(data[[subgroup]])
results <- data.frame(Subgroup = subgroup_levels, n = NA, Mean = NA, CI_lower = NA, CI_upper = NA)
# Loop through each subgroup to calculate mean, n, and 95% CI
for (i in 1:length(subgroup_levels)) {
subgroup_data <- data[data[[subgroup]] == subgroup_levels[i], variable, drop = FALSE]
n <- nrow(subgroup_data)
mean_value <- mean(subgroup_data[[variable]], na.rm = TRUE)
ci <- calculate_95CI(data, variable)
results[i, "n"] <- n
results[i, "Mean"] <- mean_value
results[i, "CI_lower"] <- ci["CI_lower"]
results[i, "CI_upper"] <- ci["CI_upper"]
}
# Check if there are more than two subgroups
if (length(subgroup_levels) > 2) {
results$P_Value <- NA
} else if (length(subgroup_levels) == 2) {
# If exactly two subgroups, perform Wilcoxon signed-rank test and add p-values to the results
test_result <- wilcox.test(data[[variable]] ~ data[[subgroup]], data = data)
results$P_Value <- rep(test_result$p.value, nrow(results))
} else {
# If only one subgroup, no comparison is needed
results$P_Value <- NA
message("Only one subgroup detected. No comparison needed.")
}
return(results)
}
compare_means(d, "Migraine", "M_mean")
compare_means <- function(data, subgroup, variable) {
# Split data into subgroups
subgroup_levels <- unique(data[[subgroup]])
results <- data.frame(Subgroup = subgroup_levels, n = NA, Mean = NA, CI_lower = NA, CI_upper = NA)
# Loop through each subgroup to calculate mean, n, and 95% CI using t-distribution
for (i in 1:length(subgroup_levels)) {
subgroup_data <- data[data[[subgroup]] == subgroup_levels[i], variable, drop = FALSE]
n <- nrow(subgroup_data)
mean_value <- mean(subgroup_data[[variable]], na.rm = TRUE)
sd_value <- sd(subgroup_data[[variable]], na.rm = TRUE)
se <- sd_value / sqrt(n)
# 95% CI calculation using t-distribution
t_value <- qt(0.975, df = n - 1)  # t-value for 95% CI and n-1 degrees of freedom
ci <- t_value * se
lower_ci <- mean_value - ci
upper_ci <- mean_value + ci
results[i, "n"] <- n
results[i, "Mean"] <- mean_value
results[i, "CI_lower"] <- lower_ci
results[i, "CI_upper"] <- upper_ci
}
# Check if there are more than two subgroups
if (length(subgroup_levels) > 2) {
results$P_Value <- NA
} else if (length(subgroup_levels) == 2) {
# If exactly two subgroups, perform Wilcoxon signed-rank test and add p-values to the results
test_result <- wilcox.test(data[[variable]] ~ data[[subgroup]], data = data)
results$P_Value <- rep(test_result$p.value, nrow(results))
} else {
# If only one subgroup, no comparison is needed
results$P_Value <- NA
message("Only one subgroup detected. No comparison needed.")
}
return(results)
}
compare_means(d, "Migraine", "M_mean")
perform_pairwise_wilcox <- function(data, variable, group_list) {
results_list <- list()
for (group in group_list) {
group_data <- data[[group]]
unique_groups <- unique(group_data)
if (length(unique_groups) > 2) {
# Generate all unique pairs
group_pairs <- combn(unique_groups, 2, simplify = FALSE)
# Initialize an empty data frame to store results
group_results <- data.frame(Group1 = character(), Group2 = character(), P_Value = numeric(), stringsAsFactors = FALSE)
for (pair in group_pairs) {
# Subset data for each group in the pair
data1 <- data[group_data == pair[1], variable, drop = FALSE]
data2 <- data[group_data == pair[2], variable, drop = FALSE]
# Perform Wilcoxon test
test_result <- wilcox.test(data1[[variable]], data2[[variable]])
# Store the results
group_results <- rbind(group_results, data.frame(Group1 = pair[1], Group2 = pair[2], P_Value = test_result$p.value, stringsAsFactors = FALSE))
}
# Add group information to the results and make it the first column
group_results <- cbind(Group = group, group_results)
results_list[[group]] <- group_results
} else {
message(paste("Group", group, "does not have more than 2 unique levels. Skipping."))
}
}
# Combine all results into a single dataframe
final_results <- do.call(rbind, results_list)
# Adjust the row names to avoid duplication
rownames(final_results) <- NULL
return(final_results)
}
generate_final_table <- function(data, variable, subgroup_list) {
final_results <- list()
for (subgroup in subgroup_list) {
subgroup_result <- compare_means(data, variable, subgroup)
colnames(subgroup_result)[colnames(subgroup_result) == "n"] <- paste("n", variable, sep = "_")
# Add a column to indicate the subgroup category and make it the first column
subgroup_result$Subgroup_Category <- subgroup
subgroup_result <- subgroup_result[, c("Subgroup_Category", setdiff(names(subgroup_result), "Subgroup_Category"))]
final_results[[subgroup]] <- subgroup_result
}
# Combine all results into a single dataframe
final_table <- do.call(rbind, final_results)
# Adjusting the row names to avoid duplication
rownames(final_table) <- NULL
# Sort final_table by Subgroup_Category first, then Subgroup
final_table <- final_table[order(final_table$Subgroup_Category, final_table$Subgroup), ]
return(final_table)
}
subgroup_list <- c("Migraine", "Gender", "Age_stage", "Race","Typer of skins", "Stress index", "Smoking", "DASS_21",  "Stress" , "Anxiety", "Hypertension", "BMI_25_30", "Obesity" )
List_var <- c("M_mean", "Kv100_mean", "δ_mean", "T_mean", "A365_mean", "A460_mean", "Anadn_mean", "POM_mean", "A-E_mean", "A-N_mean", "A-M_mean", "A-R_mean", "A-C_mean", "F-E_mean", "F-N_mean", "F-M_mean", "F-R_mean", "F-C_mean")
generate_final_table(d, "M_mean", subgroup_list) %>% knitr::kable()
perform_pairwise_wilcox(d, "Race", "M_mean")
perform_pairwise_wilcox <- function(data, group_list,variable) {
results_list <- list()
for (group in group_list) {
group_data <- data[[group]]
unique_groups <- unique(group_data)
if (length(unique_groups) > 2) {
# Generate all unique pairs
group_pairs <- combn(unique_groups, 2, simplify = FALSE)
# Initialize an empty data frame to store results
group_results <- data.frame(Group1 = character(), Group2 = character(), P_Value = numeric(), stringsAsFactors = FALSE)
for (pair in group_pairs) {
# Subset data for each group in the pair
data1 <- data[group_data == pair[1], variable, drop = FALSE]
data2 <- data[group_data == pair[2], variable, drop = FALSE]
# Perform Wilcoxon test
test_result <- wilcox.test(data1[[variable]], data2[[variable]])
# Store the results
group_results <- rbind(group_results, data.frame(Group1 = pair[1], Group2 = pair[2], P_Value = test_result$p.value, stringsAsFactors = FALSE))
}
# Add group information to the results and make it the first column
group_results <- cbind(Group = group, group_results)
results_list[[group]] <- group_results
} else {
message(paste("Group", group, "does not have more than 2 unique levels. Skipping."))
}
}
# Combine all results into a single dataframe
final_results <- do.call(rbind, results_list)
# Adjust the row names to avoid duplication
rownames(final_results) <- NULL
return(final_results)
}
perform_pairwise_wilcox(d,subgroup_list, "M_mean")
perform_pairwise_wilcox(d,"Age_stage", "M_mean")
compare_means(d, "Migraine", "M_mean")
perform_pairwise_wilcox(d,"Age_stage", "M_mean")
